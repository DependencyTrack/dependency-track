name: Build and Push Dependency-Track

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: corretto

      - name: Run Checkstyle
        run: mvn checkstyle:check

  build-and-push:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:latest


  provision:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

provision:
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v4

    - name: Set up Ansible
      run: |
        sudo apt-get update
        sudo apt-get install -y ansible python3-pip
        ansible-galaxy collection install amazon.aws
        pip install boto3 botocore

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Run Ansible playbook
      run: ansible-playbook ansibleEC2Provisoner.yml


      - name: Upload instance info
        uses: actions/upload-artifact@v4
        with:
          name: ec2-info
          path: |
            ec2_ip.txt
            ~/.ssh/YoussefAnsible-keypair.pem

  check-backend-deps:
    runs-on: ubuntu-latest
    needs: [build-and-push, provision]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Check if frontend image exists in ECR
        run: |
          aws ecr describe-images \
            --repository-name ${{ vars.FRONTEND_ECR_REPOSITORY }} \
            --image-ids imageTag=latest \
            || { echo "Missing frontend repo. CD terminated"; exit 666; }

  deploy:
    runs-on: ubuntu-latest
    needs: check-backend-deps
    steps:
      - uses: actions/checkout@v4

      - name: Download instance info
        uses: actions/download-artifact@v4
        with:
          name: ec2-info
          path: ./ec2-info

      - name: Set env from instance info
        run: |
          echo "TARGET_HOST=$(cat ./ec2-info/ec2_ip.txt)" >> $GITHUB_ENV
          chmod 600 ./ec2-info/YoussefAnsible-keypair.pem
          echo "TARGET_SSH_KEY=./ec2-info/YoussefAnsible-keypair.pem" >> $GITHUB_ENV

      - name: Copy docker-compose.yml to target EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.TARGET_HOST }}
          username: ubuntu
          key: ${{ env.TARGET_SSH_KEY }}
          source: "docker-compose.yml"
          target: "~/app/docker-compose.yml"

      - name: Run docker compose on target EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.TARGET_HOST }}
          username: ubuntu
          key: ${{ env.TARGET_SSH_KEY }}
          script: |
            cd ~/app
            docker compose pull
            docker compose up -d
