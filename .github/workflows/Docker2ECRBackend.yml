name: Build and Push Dependency-Track

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: corretto

      - name: Run Checkstyle
        run: mvn checkstyle:check

  build-and-push:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:latest

  provision:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Ansible and AWS SDK
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          python3 -m pip install --upgrade pip
          python3 -m pip install ansible boto3 botocore
          ansible-galaxy collection install amazon.aws

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Run Ansible playbook
        run: |
          ansible-playbook -i localhost, ansibleEC2Provisoner.yml \
            -e "ansible_python_interpreter=$(which python3)"
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'

      - name: List files before uploading
        run: ls -la

      - name: Upload EC2 connection artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ec2-info
          path: |
            ./ansible_key.pem
            ./ec2_ip.txt
          if-no-files-found: error

  check-frontend-deps:
    runs-on: ubuntu-latest
    needs: [build-and-push, provision]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Check if frontend image exists in ECR
        run: |
          # Make sure the variable is set
          if [ -z "${{ vars.FRONTEND_ECR_REPOSITORY }}" ]; then
            echo "Frontend repository name is not set. CD terminated"
            exit 1
          fi

          aws ecr describe-images \
            --repository-name ${{ vars.FRONTEND_ECR_REPOSITORY }} \
            --image-ids imageTag=latest \
            || { echo "Missing frontend image in ECR. CD terminated"; exit 1; }

  deploy:
    runs-on: ubuntu-latest
    needs: check-frontend-deps
    steps:
      - uses: actions/checkout@v4
  
      - name: Download EC2 info
        uses: actions/download-artifact@v4
        with:
          name: ec2-info
          path: ./ec2-info
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Deploy via SSM Run Command
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=ip-address,Values=$(cat ./ec2-info/ec2_ip.txt)" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          echo "Target instance: $INSTANCE_ID"
  
          echo "Waiting for SSM agent to be ready..."
          until aws ssm describe-instance-information \
                --filters "Key=InstanceIds,Values=$INSTANCE_ID" \
                --query "InstanceInformationList[0].InstanceId" \
                --output text | grep -q "$INSTANCE_ID"; do
            echo "SSM not ready yet. Retrying in 10s..."
            sleep 10
          done
          echo "SSM agent ready."
  
          COMMAND_ID=$(aws ssm send-command \
            --targets "Key=InstanceIds,Values=$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy docker compose from S3 and run ECR images" \
            --parameters '{
              "commands": [
                "if ! docker compose version > /dev/null 2>&1; then sudo yum install -y docker-compose-plugin; fi",
                "cd /home/ec2-user",
                "aws s3 cp s3://joe1dayusebucket/docker-compose.yml ./docker-compose.yml",
                "aws ecr get-login-password --region '"$AWS_REGION"' | docker login --username AWS --password-stdin 645537741587.dkr.ecr.'"$AWS_REGION"'.amazonaws.com",
                "docker compose up -d"
              ]
            }' \
            --query "Command.CommandId" \
            --output text)
  
          echo "Sent command $COMMAND_ID. Streaming output..."
  
          # Stream output until command finishes
          while true; do
            OUTPUT=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --output text --query 'StandardOutputContent')
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --output text --query 'Status')
            clear
            echo "$OUTPUT"
            if [[ "$STATUS" == "Success" || "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
              echo "Final status: $STATUS"
              break
            fi
            sleep 5
          done
