---
- name: Create EC2 instance and keypair
  hosts: localhost
  connection: local
  gather_facts: no
  collections:
    - amazon.aws

  vars:
    aws_region: us-east-1
    instance_type: t3.small
    ami_id: "{{ lookup('aws_ssm', '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64', region=aws_region) }}"
    key_name: YoussefAnsible-keypair
    pem_file: "{{ playbook_dir }}/ansible_key.pem"
    security_group: sg-09091d64701497a2f
    subnet_id: subnet-0b4309b00435bfb03

  tasks:
    - name: Create a keypair
      amazon.aws.ec2_key:
        name: "{{ key_name }}"
        region: "{{ aws_region }}"
        state: present
      register: new_keypair

    - name: Save private key for reference
      copy:
        content: "{{ new_keypair.key.private_key }}"
        dest: "{{ pem_file }}"
        mode: '0600'
      when: new_keypair.changed

    - name: Launch EC2 instance
      amazon.aws.ec2_instance:
        name: ansible-youssef-al2023
        key_name: "{{ key_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami_id }}"
        region: "{{ aws_region }}"
        security_group: "{{ security_group }}"
        subnet_id: "{{ subnet_id }}"
        wait: yes
        count: 1
        network:
          assign_public_ip: yes
        iam_instance_profile: "YoussefSSMrole"
      register: ec2

    - name: Save instance IP for GitHub Actions artifact
      copy:
        content: "{{ ec2.instances[0].public_ip_address }}"
        dest: "{{ playbook_dir }}/ec2_ip.txt"
      delegate_to: localhost

    - name: Show new instance IP
      debug:
        msg: "EC2 instance launched with IP {{ ec2.instances[0].public_ip_address }}"

# ---------------------------------------------------------
# Second play: Configure EC2 using SSM Run Command
# ---------------------------------------------------------
- name: Configure EC2 via SSM
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    instance_id: "{{ ec2.instances[0].instance_id }}"
    aws_region: us-east-1

  tasks:
    - name: Wait until instance is managed by SSM
      ansible.builtin.shell: |
        until aws ssm describe-instance-information \
          --region {{ aws_region }} \
          --filters Key=InstanceIds,Values={{ instance_id }} | grep -q {{ instance_id }}; do
          echo "Waiting for SSM agent..."
          sleep 15
        done
      args:
        executable: /bin/bash

    - name: Install Docker and Docker Compose via SSM
      ansible.builtin.shell: |
        aws ssm send-command \
          --targets "Key=InstanceIds,Values={{ instance_id }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Install Docker and Docker Compose" \
          --parameters 'commands=[
            "sudo yum install -y docker",
            "sudo systemctl enable docker",
            "sudo systemctl start docker",
            "sudo curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-$(uname -m) -o /usr/libexec/docker/cli-plugins/docker-compose",
            "sudo chmod +x /usr/libexec/docker/cli-plugins/docker-compose"
          ]' \
          --region {{ aws_region }}
      args:
        executable: /bin/bash
