diff --git a/src/main/java/org/dependencytrack/policy/LicenseGroupPolicyEvaluator.java b/src/main/java/org/dependencytrack/policy/LicenseGroupPolicyEvaluator.java
index f405c2af0..d4462000e 100644
--- a/src/main/java/org/dependencytrack/policy/LicenseGroupPolicyEvaluator.java
+++ b/src/main/java/org/dependencytrack/policy/LicenseGroupPolicyEvaluator.java
@@ -44,7 +44,7 @@ public class LicenseGroupPolicyEvaluator extends AbstractPolicyEvaluator {
 
     /**
      * A license group that does not exist in the database and is therefore verified based on its
-     * licenses list directly instad of a database check
+     * licenses list directly instead of a database check
      */
     private static class TemporaryLicenseGroup extends LicenseGroup {
         private static final long serialVersionUID = -1268650463377651000L;
@@ -66,7 +66,7 @@ public class LicenseGroupPolicyEvaluator extends AbstractPolicyEvaluator {
      * In order to simplify thinking about license violations, this license group type is used.
      *
      */
-    private static enum LicenseGroupType {
+    private enum LicenseGroupType {
         /**
          * License group represents a list of licenses that are explicitly allowed to be used
          */
@@ -74,7 +74,7 @@ public class LicenseGroupPolicyEvaluator extends AbstractPolicyEvaluator {
         /**
          * License group represents a list of licenses that are not allowed to be used
          */
-        ForbiddenLicenseList;
+        ForbiddenLicenseList
     }
 
     private static final Logger LOGGER = Logger.getLogger(LicenseGroupPolicyEvaluator.class);
@@ -269,7 +269,7 @@ public class LicenseGroupPolicyEvaluator extends AbstractPolicyEvaluator {
         }
         if (operation.getOperator() == SpdxOperator.PLUS) {
             // Transform `GPL-2.0+` to `GPL-2.0 OR GPL-2.0-or-later`
-            SpdxExpression arg = operation.getArguments().get(0);
+            SpdxExpression arg = operation.getArguments().getFirst();
             return canLicenseBeUsed(qm, arg, groupType, lg)
                     || canLicenseBeUsed(qm, new SpdxExpression(expr.getSpdxLicenseId() + "-or-later"), groupType, lg);
         }
diff --git a/src/main/java/org/dependencytrack/policy/PolicyEngine.java b/src/main/java/org/dependencytrack/policy/PolicyEngine.java
index b6ee0a2d2..5e8f586a2 100644
--- a/src/main/java/org/dependencytrack/policy/PolicyEngine.java
+++ b/src/main/java/org/dependencytrack/policy/PolicyEngine.java
@@ -96,7 +96,6 @@ public class PolicyEngine {
                         policyConditionViolations.addAll(policyConditionViolationsFromEvaluator);
                         policyConditionsViolated += (int) policyConditionViolationsFromEvaluator.stream()
                                 .map(pcv -> pcv.getPolicyCondition().getId())
-                                .sorted()
                                 .distinct()
                                 .count();
                     }
diff --git a/src/main/java/org/dependencytrack/policy/VersionDistancePolicyEvaluator.java b/src/main/java/org/dependencytrack/policy/VersionDistancePolicyEvaluator.java
index f1c1c2abc..b4744b11c 100644
--- a/src/main/java/org/dependencytrack/policy/VersionDistancePolicyEvaluator.java
+++ b/src/main/java/org/dependencytrack/policy/VersionDistancePolicyEvaluator.java
@@ -34,14 +34,14 @@ import java.util.ArrayList;
 import java.util.List;
 
 /**
- * Evaluates the {@link VersionDistance} between a {@link Component}'s current and it's latest
+ * Evaluates the {@link VersionDistance} between a {@link Component}'s current, and it's the latest
  * version against a {@link Policy}. This makes it possible to add a policy for checking outdated
  * components. The policy "greater than 0:1.?.?" for example means, a difference of only one
- * between the curren version's major number and the latest version's major number is allowed.
+ * between the current version's major number and the latest version's major number is allowed.
  *
  * VersionDistances can be combined in a policy. For example "greater than 1:1.?.?" means a
  * difference of only one epoch number or one major number is allowed. Or "greater than 1.1.?"
- * means a difference of only one majr number or one minor number is allowed
+ * means a difference of only one major number or one minor number is allowed
  *
  * @since 4.9.0
  */
@@ -112,7 +112,7 @@ public class VersionDistancePolicyEvaluator extends AbstractPolicyEvaluator {
      * Evaluate VersionDistance conditions for a given versionDistance. A condition
      *
      * @param condition operator and value containing combined {@link VersionDistance} values
-     * @param versionDistance the {@link VersionDistance} to evalue
+     * @param versionDistance the {@link VersionDistance} to evaluate
      * @return true if the condition is true for the components versionDistance, false otherwise
      */
     private boolean evaluate(final PolicyCondition condition, final VersionDistance versionDistance) {
