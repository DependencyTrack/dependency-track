{
  "isDeprecatedLicenseId": false,
  "licenseExceptionText": "Preamble to the Gnu Lesser General Public License\n\nCopyright (c) 2016 Franz Inc., Berkeley, CA 94704\n\nThe concept of the GNU Lesser General Public License version 2.1 (\"LGPL\") \nhas been adopted to govern the use and distribution of above-mentioned \napplication. However, the LGPL uses terminology that is more appropriate \nfor a program written in C than one written in Lisp. Nevertheless, the\nLGPL can still be applied to a Lisp program if certain clarifications \nare made. This document details those clarifications. Accordingly, the \nlicense for the open-source Lisp applications consists of this document \nplus the LGPL. Wherever there is a conflict between this document and \nthe LGPL, this document takes precedence over the LGPL.\n\nA \"Library\" in Lisp is a collection of Lisp functions, data and foreign \nmodules. The form of the Library can be Lisp source code (for processing \nby an interpreter) or object code (usually the result of compilation of \nsource code or built with some other mechanisms). Foreign modules are \nobject code in a form that can be linked into a Lisp executable. When \nwe speak of functions we do so in the most general way to include, in \naddition, methods and unnamed functions. Lisp \"data\" is also a general \nterm that includes the data structures resulting from defining Lisp \nclasses. A Lisp application may include the same set of Lisp objects \nas does a Library, but this does not mean that the application is \nnecessarily a \"work based on the Library\" it contains.\n\nThe Library consists of everything in the distribution file set before \nany modifications are made to the files. If any of the functions or \nclasses in the Library are redefined in other files, then those \nredefinitions ARE considered a work based on the Library. If additional \nmethods are added to generic functions in the Library, those additional \nmethods are NOT considered a work based on the Library. If Library classes \nare subclassed, these subclasses are NOT considered a work based on the Library. \nIf the Library is modified to explicitly call other functions that are neither \npart of Lisp itself nor an available add-on module to Lisp, then the functions \ncalled by the modified Library ARE considered a work based on the Library. \nThe goal is to ensure that the Library will compile and run without getting \nundefined function errors.\n\nIt is permitted to add proprietary source code to the Library, but it must \nbe done in a way such that the Library will still run without that proprietary \ncode present. Section 5 of the LGPL distinguishes between the case of a \nlibrary being dynamically linked at runtime and one being statically linked \nat build time. Section 5 of the LGPL states that the former results in an \nexecutable that is a \"work that uses the Library.\" Section 5 of the LGPL \nstates that the latter results in one that is a \"derivative of the Library\", \nwhich is therefore covered by the LGPL. Since Lisp only offers one choice, \nwhich is to link the Library into an executable at build time, we declare that, \nfor the purpose applying the LGPL to the Library, an executable that results \nfrom linking a \"work that uses the Library\" with the Library is considered a \n\"work that uses the Library\" and is therefore NOT covered by the LGPL.\n\nBecause of this declaration, section 6 of LGPL is not applicable to the Library. \nHowever, in connection with each distribution of this executable, you must also \ndeliver, in accordance with the terms and conditions of the LGPL, the source code \nof Library (or your derivative thereof) that is incorporated into this executable.\n",
  "name": "LLGPL Preamble",
  "licenseComments": "Typically used with LGPL-2.1",
  "seeAlso": [
    "http://opensource.franz.com/preamble.html"
  ],
  "licenseExceptionId": "LLGPL",
  "licenseExceptionTemplate": "\u003c\u003cbeginOptional\u003e\u003ePreamble to the Gnu Lesser General Public License\u003c\u003cendOptional\u003e\u003e \u003c\u003cvar;name\u003d\"copyright\";original\u003d\"Copyright (c) 2000 Franz Incorporated, Berkeley, CA 94704\";match\u003d\".{0,5000}\"\u003e\u003e\n\n\u003c\u003cbeginOptional\u003e\u003eFranz Inc. has adopted the concept of the GNU Lesser General Public License version 2.1 (\"LGPL\") to govern the use and distribution of AllegroServe.\u003c\u003cendOptional\u003e\u003e\u003c\u003cbeginOptional\u003e\u003e The concept of the GNU Lesser General Public License version 2.1 (\"LGPL\") has been adopted to govern the use and distribution of above-mentioned application\u003c\u003cendOptional\u003e\u003e . However,\u003c\u003cbeginOptional\u003e\u003e the\u003c\u003cendOptional\u003e\u003e LGPL uses terminology that is more appropriate for a program written in C than one written in Lisp. Nevertheless,\u003c\u003cbeginOptional\u003e\u003e the\u003c\u003cendOptional\u003e\u003e LGPL can still be applied to a Lisp program if certain clarifications are made. This document details those clarifications. Accordingly, the license for \u003c\u003cvar;name\u003d\"app\";original\u003d\"the open-source Lisp applications\";match\u003d\"the open-source Lisp applications|AllegroServe\"\u003e\u003e consists of this document plus\u003c\u003cbeginOptional\u003e\u003e the\u003c\u003cendOptional\u003e\u003e LGPL. Wherever there is a conflict between this document and the LGPL, this document takes precedence over\u003c\u003cbeginOptional\u003e\u003e the\u003c\u003cendOptional\u003e\u003e LGPL.\n\nA \"Library\" in Lisp is a collection of Lisp functions, data and foreign modules. The form of the Library can be Lisp source code (for processing by an interpreter) or object code (usually the result of compilation of source code or built with some other mechanisms). Foreign modules are object code in a form that can be linked into a Lisp executable. When we speak of functions we do so in the most general way to include, in addition, methods and unnamed functions. Lisp \"data\" is also a general term that includes the data structures resulting from defining Lisp classes. A Lisp application may include the same set of Lisp objects as does a Library, but this does not mean that the application is necessarily a \"work based on the Library\" it contains.\n\nThe \u003c\u003cvar;name\u003d\"library1\";original\u003d\"Library\";match\u003d\"Library|AllegroServe Library\"\u003e\u003e consists of everything in the distribution file set before any modifications are made to the files. If any of the functions or classes in the \u003c\u003cvar;name\u003d\"library2\";original\u003d\"Library\";match\u003d\"Library|AllegroServe Library\"\u003e\u003e are redefined in other files, then those redefinitions ARE considered a work based on the \u003c\u003cvar;name\u003d\"library3\";original\u003d\"Library\";match\u003d\"Library|AllegroServe Library\"\u003e\u003e . If additional methods are added to generic functions in the \u003c\u003cvar;name\u003d\"library4\";original\u003d\"Library\";match\u003d\"Library|AllegroServe Library\"\u003e\u003e , those additional methods are NOT considered a work based on the \u003c\u003cvar;name\u003d\"library5\";original\u003d\"Library\";match\u003d\"Library|AllegroServe Library\"\u003e\u003e . If \u003c\u003cvar;name\u003d\"library6\";original\u003d\"Library\";match\u003d\"Library|AllegroServe Library\"\u003e\u003e classes are subclassed, these subclasses are NOT considered a work based on the \u003c\u003cvar;name\u003d\"library7\";original\u003d\"Library\";match\u003d\"Library|AllegroServe Library\"\u003e\u003e . If the Library is modified to explicitly call other functions that are neither part of Lisp itself nor an available add-on module to Lisp, then the functions called by the modified \u003c\u003cvar;name\u003d\"library8\";original\u003d\"Library\";match\u003d\"Library|AllegroServe Library\"\u003e\u003e ARE considered a work based on the \u003c\u003cvar;name\u003d\"library9\";original\u003d\"Library\";match\u003d\"Library|AllegroServe Library\"\u003e\u003e . The goal is to ensure that the \u003c\u003cvar;name\u003d\"library10\";original\u003d\"Library\";match\u003d\"Library|AllegroServe Library\"\u003e\u003e will compile and run without getting undefined function errors.\n\nIt is permitted to add proprietary source code to the \u003c\u003cvar;name\u003d\"library11\";original\u003d\"Library\";match\u003d\"Library|AllegroServe Library\"\u003e\u003e , but it must be done in a way such that the \u003c\u003cvar;name\u003d\"library12\";original\u003d\"Library\";match\u003d\"Library|AllegroServe Library\"\u003e\u003e will still run without that proprietary code present. Section 5 of the LGPL distinguishes between the case of a library being dynamically linked at runtime and one being statically linked at build time. Section 5 of the LGPL states that the former results in an executable that is a \"work that uses the Library.\" Section 5 of the LGPL states that the latter results in one that is a \"derivative of the Library\", which is therefore covered by\u003c\u003cbeginOptional\u003e\u003e the\u003c\u003cendOptional\u003e\u003e LGPL. Since Lisp only offers one choice, which is to link the Library into an executable at build time, we declare that, for the purpose applying the LGPL to the \u003c\u003cvar;name\u003d\"library13\";original\u003d\"Library\";match\u003d\"Library|AllegroServe Library\"\u003e\u003e , an executable that results from linking a \"work that uses the \u003c\u003cvar;name\u003d\"library14\";original\u003d\"Library\";match\u003d\"Library|AllegroServe Library\"\u003e\u003e \" with the Library is considered a \"work that uses the Library\" and is therefore NOT covered by the LGPL.\n\nBecause of this declaration, section 6 of LGPL is not applicable to the \u003c\u003cvar;name\u003d\"library15\";original\u003d\"Library\";match\u003d\"Library|AllegroServe Library\"\u003e\u003e . However, in connection with each distribution of this executable, you must also deliver, in accordance with the terms and conditions of the LGPL, the source code of \u003c\u003cvar;name\u003d\"library16\";original\u003d\"Library\";match\u003d\"Library|AllegroServe Library\"\u003e\u003e (or your derivative thereof) that is incorporated into this executable.\n\n",
  "exceptionTextHtml": "\n         \u003cvar class\u003d\"optional-license-text\"\u003e Preamble to the Gnu Lesser General Public License\n         \u003c/var\u003e\n         \u003cvar class\u003d\"replaceable-license-text\"\u003e \n            Copyright (c) 2000 Franz Incorporated, Berkeley, CA 94704\n         \u003c/var\u003e\n         \u003cp\u003e\n\t    \u003cvar class\u003d\"optional-license-text\"\u003e Franz Inc. has adopted the concept of the GNU Lesser General Public License version 2.1 (\u0026quot;LGPL\u0026quot;) to govern the use and distribution of AllegroServe.\u003c/var\u003e\n\t    \u003cvar class\u003d\"optional-license-text\"\u003e The concept of the GNU Lesser General Public License version 2.1 (\u0026quot;LGPL\u0026quot;) has been adopted to govern the use and distribution of above-mentioned application\u003c/var\u003e.\n\t    However, \u003cvar class\u003d\"optional-license-text\"\u003e the\u003c/var\u003e LGPL uses terminology\n            that is more appropriate for a program written in C than one\n\t    written in Lisp. Nevertheless, \u003cvar class\u003d\"optional-license-text\"\u003e the\u003c/var\u003e LGPL can still be applied to\n            a Lisp program if certain clarifications are made. This document\n            details those clarifications. Accordingly, the license for\n            \u003cvar class\u003d\"replaceable-license-text\"\u003e the\n            open-source Lisp applications\u003c/var\u003e consists of this document plus\n\t    \u003cvar class\u003d\"optional-license-text\"\u003e the\u003c/var\u003e LGPL. Wherever there is a conflict between this document\n\t    and the LGPL, this document takes precedence over \u003cvar class\u003d\"optional-license-text\"\u003e the\u003c/var\u003e LGPL.\n         \u003c/p\u003e\n\n         \u003cp\u003e\n            A \u0026quot;Library\u0026quot; in Lisp is a collection of Lisp functions, data and\n            foreign modules. The form of the Library can be Lisp source code\n            (for processing by an interpreter) or object code (usually the\n            result of compilation of source code or built with some other\n            mechanisms). Foreign modules are object code in a form that can\n            be linked into a Lisp executable. When we speak of functions we\n            do so in the most general way to include, in addition, methods\n            and unnamed functions. Lisp \u0026quot;data\u0026quot; is also a general term that\n            includes the data structures resulting from defining Lisp classes.\n            A Lisp application may include the same set of Lisp objects\n            as does a Library, but this does not mean that the application\n            is necessarily a \u0026quot;work based on the Library\u0026quot; it contains.\n         \u003c/p\u003e\n\n         \u003cp\u003e\n            The \u003cvar class\u003d\"replaceable-license-text\"\u003e Library\u003c/var\u003e \n            consists of everything in the distribution file set\n            before any modifications are made to the files. If any of the\n            functions or classes in the \u003cvar class\u003d\"replaceable-license-text\"\u003e Library\u003c/var\u003e \n            are redefined in other files,\n            then those redefinitions ARE considered a work based on the\n            \u003cvar class\u003d\"replaceable-license-text\"\u003e Library\u003c/var\u003e. \n            If additional methods are added to generic functions in\n            the \u003cvar class\u003d\"replaceable-license-text\"\u003e Library\u003c/var\u003e, \n            those additional methods are NOT considered a work\n            based on the \u003cvar class\u003d\"replaceable-license-text\"\u003e Library\u003c/var\u003e. \n            If \u003cvar class\u003d\"replaceable-license-text\"\u003e Library\u003c/var\u003e classes are subclassed, these\n            subclasses are NOT considered a work based on the \u003cvar class\u003d\"replaceable-license-text\"\u003e Library\u003c/var\u003e. \n            If the Library is modified to explicitly call other functions that are\n            neither part of Lisp itself nor an available add-on module to Lisp,\n            then the functions called by the modified \n            \u003cvar class\u003d\"replaceable-license-text\"\u003e Library\u003c/var\u003e \n            ARE considered a work based on the \u003cvar class\u003d\"replaceable-license-text\"\u003e Library\u003c/var\u003e. \n            The goal is to ensure that the \u003cvar class\u003d\"replaceable-license-text\"\u003e Library\u003c/var\u003e\n            will compile and run without getting undefined function errors.\n         \u003c/p\u003e\n\n         \u003cp\u003e\n            It is permitted to add proprietary source code to the \n            \u003cvar class\u003d\"replaceable-license-text\"\u003e Library\u003c/var\u003e,\n            but it must be done in a way such that the \u003cvar class\u003d\"replaceable-license-text\"\u003e Library\u003c/var\u003e \n            will still run without that proprietary code present. Section 5 of the LGPL\n            distinguishes between the case of a library being dynamically linked\n            at runtime and one being statically linked at build time. Section\n            5 of the LGPL states that the former results in an executable\n            that is a \u0026quot;work that uses the Library.\u0026quot; Section 5 of the LGPL\n            states that the latter results in one that is a \u0026quot;derivative of the\n\t    Library\u0026quot;, which is therefore covered by \u003cvar class\u003d\"optional-license-text\"\u003e the\u003c/var\u003e LGPL. Since Lisp only\n            offers one choice, which is to link the Library into an executable\n            at build time, we declare that, for the purpose applying the LGPL\n            to the \u003cvar class\u003d\"replaceable-license-text\"\u003e Library\u003c/var\u003e, \n            an executable that results from linking a \u0026quot;work\n            that uses the \u003cvar class\u003d\"replaceable-license-text\"\u003e Library\u003c/var\u003e\u0026quot; \n            with the Library is considered a \u0026quot;work\n            that uses the Library\u0026quot; and is therefore NOT covered by the LGPL.\n         \u003c/p\u003e\n\n         \u003cp\u003e\n            Because of this declaration, section 6 of LGPL is not applicable\n            to the \u003cvar class\u003d\"replaceable-license-text\"\u003e Library\u003c/var\u003e. \n            However, in connection with each distribution of\n            this executable, you must also deliver, in accordance with the\n            terms and conditions of the LGPL, the source code of \n            \u003cvar class\u003d\"replaceable-license-text\"\u003e Library\u003c/var\u003e (or\n            your derivative thereof) that is incorporated into this executable.\n         \u003c/p\u003e\n\n      "
}