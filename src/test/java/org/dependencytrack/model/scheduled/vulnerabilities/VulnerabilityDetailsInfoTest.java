package org.dependencytrack.model.scheduled.vulnerabilities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.UUID;

import org.dependencytrack.model.AnalysisState;
import org.dependencytrack.model.Finding;
import org.dependencytrack.model.Severity;
import org.dependencytrack.tasks.scanners.AnalyzerIdentity;
import org.dependencytrack.util.ScheduledUtil;
import org.junit.Assert;
import org.junit.Test;

public class VulnerabilityDetailsInfoTest {
    private final UUID projectUuid = UUID.randomUUID();
    private final Date attributedOn = new Date();
    private final Finding finding = new Finding(projectUuid, "component-uuid", "component-name", "component-group",
            "component-version", "component-purl", "component-cpe", "vuln-uuid", "vuln-source", "vuln-vulnId", "vuln-title",
            "vuln-subtitle", "vuln-description", "vuln-recommendation", Severity.HIGH, BigDecimal.valueOf(7.2), BigDecimal.valueOf(8.4), BigDecimal.valueOf(1.25), BigDecimal.valueOf(1.75), BigDecimal.valueOf(1.3),
            "0.5", "0.9", null, AnalyzerIdentity.INTERNAL_ANALYZER, attributedOn, null, "reference-url", AnalysisState.NOT_AFFECTED, true);
    
    @Test
    public void testComponentUuid() {
        var info = new VulnerabilityDetailsInfo(finding);
        Assert.assertEquals("component-uuid", info.getComponentUuid());
    }

    @Test
    public void testComponentName() {
        var info = new VulnerabilityDetailsInfo(finding);
        Assert.assertEquals("component-name", info.getComponentName());
    }

    @Test
    public void testComponentVersion() {
        var info = new VulnerabilityDetailsInfo(finding);
        Assert.assertEquals("component-version", info.getComponentVersion());
    }

    @Test
    public void testComponentGroup() {
        var info = new VulnerabilityDetailsInfo(finding);
        Assert.assertEquals("component-group", info.getComponentGroup());
    }

    @Test
    public void testVulnerabilitySource() {
        var info = new VulnerabilityDetailsInfo(finding);
        Assert.assertEquals("vuln-source", info.getVulnerabilitySource());
    }

    @Test
    public void testVulnerabilityId() {
        var info = new VulnerabilityDetailsInfo(finding);
        Assert.assertEquals("vuln-vulnId", info.getVulnerabilityId());
    }

    @Test
    public void testVulnerabilitySeverity() {
        var info = new VulnerabilityDetailsInfo(finding);
        Assert.assertEquals(Severity.HIGH, info.getVulnerabilitySeverity());
    }

    @Test
    public void testAnalyzer() {
        var info = new VulnerabilityDetailsInfo(finding);
        Assert.assertEquals(AnalyzerIdentity.INTERNAL_ANALYZER, info.getAnalyzer());
    }

    @Test
    public void testAttributionReferenceUrl() {
        var info = new VulnerabilityDetailsInfo(finding);
        Assert.assertEquals("reference-url", info.getAttributionReferenceUrl());
    }

    @Test
    public void testAttributedOn() {
        var info = new VulnerabilityDetailsInfo(finding);
        Assert.assertEquals(ScheduledUtil.getDateOrUnknownIfNull(attributedOn), info.getAttributedOn());
    }

    @Test
    public void testAnalysisState() {
        var info = new VulnerabilityDetailsInfo(finding);
        Assert.assertEquals(AnalysisState.NOT_AFFECTED, info.getAnalysisState());
    }

    @Test
    public void testSuppressed() {
        var info = new VulnerabilityDetailsInfo(finding);
        Assert.assertTrue(info.getSuppressed());
    }
}
