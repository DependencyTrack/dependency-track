package org.dependencytrack.util;

import org.dependencytrack.model.NotificationAlias;
import org.dependencytrack.model.Vulnerability;
import org.dependencytrack.model.VulnerabilityAlias;
import org.junit.Assert;
import org.junit.Test;

import java.util.Comparator;
import java.util.List;
import java.util.Arrays;
import java.util.Set;
import java.util.function.Consumer;

import static org.assertj.core.api.Assertions.assertThat;

public class VulnerabilityUtilTest {

    @Test
    public void testGetUniqueAliases() {
        final var vuln = new Vulnerability();
        vuln.setVulnId("INTERNAL-001");
        vuln.setSource(Vulnerability.Source.INTERNAL);
        vuln.setAliases(List.of(
                createAlias(alias -> {
                    alias.setInternalId("INTERNAL-001");
                    alias.setGhsaId("GHSA-002");
                    alias.setSonatypeId("SONATYPE-003");
                    alias.setAliasReportedBy(Vulnerability.Source.GITHUB);
                }),
                createAlias(alias -> {
                    alias.setInternalId("INTERNAL-001");
                    alias.setOsvId("OSV-004");
                    alias.setSonatypeId("SONATYPE-003");
                    alias.setAliasReportedBy(Vulnerability.Source.OSV);
                })
        ));

        final Set<NotificationAlias> uniqueAliases = VulnerabilityUtil.getUniqueAliases(vuln);
        assertThat(uniqueAliases).hasSize(3);

        NotificationAlias[] aliases = uniqueAliases.toArray(new NotificationAlias[uniqueAliases.size()]);
        Arrays.sort(aliases, Comparator.comparing(NotificationAlias::getSource));

        Assert.assertEquals(aliases[0].getSource(), Vulnerability.Source.GITHUB);
        Assert.assertEquals(aliases[0].getVulnId(), "GHSA-002");
        Assert.assertEquals(aliases[0].getReportedBy(), List.of(Vulnerability.Source.GITHUB));

        Assert.assertEquals(aliases[1].getSource(), Vulnerability.Source.OSSINDEX);
        Assert.assertEquals(aliases[1].getVulnId(), "SONATYPE-003");
        Assert.assertEquals(aliases[1].getReportedBy(), List.of(Vulnerability.Source.GITHUB, Vulnerability.Source.OSV));

        Assert.assertEquals(aliases[2].getSource(), Vulnerability.Source.OSV);
        Assert.assertEquals(aliases[2].getVulnId(), "OSV-004");
        Assert.assertEquals(aliases[2].getReportedBy(), List.of(Vulnerability.Source.OSV));
    }

    @Test
    public void testGetUniqueAliasesWhenVulnerabilityIsNull() {
        assertThat(VulnerabilityUtil.getUniqueAliases(null)).isEmpty();
    }

    @Test
    public void testGetUniqueAliasesWhenAliasesAreNull() {
        assertThat(VulnerabilityUtil.getUniqueAliases(new Vulnerability())).isEmpty();
    }

    private VulnerabilityAlias createAlias(final Consumer<VulnerabilityAlias> customizer) {
        final var alias = new VulnerabilityAlias();
        customizer.accept(alias);
        return alias;
    }

}